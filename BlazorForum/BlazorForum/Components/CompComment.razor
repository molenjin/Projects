@using BlazorForum.Data
@using BlazorForum.Database
@using BlazorForum.Libraries
@using BlazorForum.Components

@inject IDatabaseCalls DatabaseCalls
@inject LibValidate LibValidate
@inject LibExternal LibExternal

<div class="panel">
    <EditForm FormName="Hello" Model="this" OnSubmit="SubmitAsync">
        @* User name ----------------------------------------- *@
        <div class="column20 right-desktop">User name&nbsp;&nbsp;</div>
        <div class="column paddingR-10">
            <InputText @bind-Value=@inputName class="textfield" tabindex="1" size="40" maxlength="20" />
        </div>
        <div class="spacer4"></div>
        @* Title --------------------------------------------- *@
        @if (PostType == PostType.TopicNew || PostType == PostType.TopicUpdate)
        {
            <div class="column20 right-desktop">Title&nbsp;&nbsp;</div>
            <div class="column paddingR-10">
                <InputText @bind-Value=@inputTitle class="textfield" tabindex="2" size="40" maxlength="60" />
            </div>
            <div class="spacer4"></div>
        }
        @* Text ---------------------------------------------- *@
        <div class="column20 right-desktop">Text&nbsp;&nbsp;</div>
        <div class="column paddingR-10">
            <InputTextArea @bind-Value=@inputText class="textarea" tabindex="3" rows="@rowsText" maxlength="5000" />
        </div>
        <div class="spacer4"></div>
        @* Submit -------------------------------------------- *@
        <div class="column20 right-desktop">&nbsp;</div>
        <div class="column paddingR-10">
            <button class="btn btn-primary" type="submit">Submit</button>
            <br />
            <br />
            <p class="text-danger">@errorMessage</p>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public PostType PostType { get; set; }

    [Parameter]
    public int? TopicId { get; set; }

    [Parameter]
    public int? CommentId { get; set; }

    private string inputName = string.Empty;
    private string inputTitle = string.Empty;
    private string inputText = string.Empty;

    private int rowsText;

    private string errorMessage = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        rowsText = PostType == PostType.TopicNew || PostType == PostType.TopicUpdate ? 20 : 10;
    }

    private async Task SubmitAsync()
    {
        IpInfo ipInfo = await LibExternal.GetIpInfoAsync();

        Comment comment = new Comment()
            {
                Id = await DatabaseCalls.GetNextCommentIdAsync(),
                TopicId = this.TopicId,
                Name = inputName.Trim(),
                Title = PostType == PostType.TopicNew || PostType == PostType.TopicUpdate ? inputTitle.Trim() : null,
                Text = inputText.Trim(),
                Active = true,
                Hidden = false,
                Closed = false
            };

        errorMessage = string.Empty;

        try
        {
            // Validate the input fields
            (bool result, string message) = await LibValidate.IsCommentValidAsync(comment);
            if (result != true)
            {
                errorMessage = message;
                return;
            }

            //------ Banned IP
            if (await DatabaseCalls.IsBannedIpAsync(ipInfo.Ip))
            {
                errorMessage = "You are not allowed to post on this forum";
                return;
            }

            int userId = await DatabaseCalls.GetUserIdAsync(comment.Name, ipInfo.Ip);

            if (userId == 0)
            {
                userId = await DatabaseCalls.GetNextUserIdAsync();

                await DatabaseCalls.SaveUserAsync(new User()
                    {
                        Id = userId,
                        Name = comment.Name,
                        CountryCode = ipInfo.CountryCode,
                        IP = ipInfo.Ip,
                        Active = true,
                        Moderator = false
                    });
            }

            comment.UserId = userId;

            await DatabaseCalls.SaveCommentAsync(comment);
        }
        catch (Exception ex)
        {
            // Handle validation errors
        }
    }
}
