@using BlazorForum.Data
@using BlazorForum.Database
@using BlazorForum.Libraries

@inject IDatabaseCalls DatabaseCalls
@inject LibValidate LibValidate
@inject LibExternal LibExternal

<div class="panel">
    @* User name ----------------------------------------- *@
    <label class="bold">
        User name
        <InputText @bind-Value=@InputName class="textfield" disabled="@isEditable" tabindex="1" size="100%" maxlength="20" />
    </label>
    <div class="spacer10" />
    @* Title --------------------------------------------- *@
    @if (PostType == PostType.TopicNew || PostType == PostType.TopicUpdate)
    {
        <label class="bold">
            Title
            <InputText @bind-Value=@InputTitle class="textfield" tabindex="2" size="100%" maxlength="60" />
        </label>           
        <div class="spacer10" />
    }
    @* Text ---------------------------------------------- *@
    <label class="bold full_width">
        Text
        <InputTextArea @bind-Value=@InputText class="textarea" tabindex="3" rows="@rowsText" maxlength="5000" />
    </label>
    <div class="spacer10" />
    @* Error message ------------------------------------- *@
    <p class="text-danger">@errorMessage</p>
</div>

@code {
    [Parameter]
    public PostType PostType { get; set; }

    [Parameter]
    public int? CommentId { get; set; }

    [Parameter]
    public int? TopicId { get; set; }

    [Parameter]
    public bool IsModerator { get; set; }

    [Parameter]
    public string InputName { get; set; } = string.Empty;

    [Parameter]
    public string InputTitle { get; set; } = string.Empty;

    [Parameter]
    public string InputText { get; set; } = string.Empty;

    private bool isEditable;

    private int rowsText;

    private string errorMessage = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (IsModerator && (PostType == PostType.TopicNew || PostType == PostType.CommentNew))
        {
            InputName = "Moderator";
        }

        isEditable = PostType == PostType.TopicUpdate || PostType == PostType.CommentUpdate;

        rowsText = PostType == PostType.TopicNew || PostType == PostType.TopicUpdate ? 16 : 8;
    }

    public async Task<bool> SubmitCommentAsync()
    {
        try
        {
            IpInfo ipInfo = await LibExternal.GetIpInfoAsync();

            Comment comment = new Comment()
            {
                Id = this.CommentId ?? 0,
                TopicId = this.TopicId,
                Name = InputName.Trim(),
                Title = PostType == PostType.TopicNew || PostType == PostType.TopicUpdate ? InputTitle.Trim() : null,
                Text = InputText.Trim(),
                Active = true,
                Moderator = IsModerator,
                Hidden = false,
                Closed = false
            };

            errorMessage = string.Empty;

            // Validate the input fields
            (bool result, string message) = await LibValidate.IsCommentValidAsync(PostType, comment);
            if (result != true)
            {
                errorMessage = message;
                return false;
            }

            //------ Banned IP
            if (await DatabaseCalls.IsBannedIpAsync(ipInfo.Ip))
            {
                errorMessage = "You are not allowed to post on this forum";
                return false;
            }

            if (PostType == PostType.TopicNew || PostType == PostType.CommentNew)
            {
                comment.Id = await DatabaseCalls.GetNextCommentIdAsync();

                int userId = await DatabaseCalls.GetUserIdAsync(comment.Name, ipInfo.Ip);

                if (userId == 0)
                {
                    userId = await DatabaseCalls.GetNextUserIdAsync();

                    await DatabaseCalls.SaveUserAsync(new User()
                    {
                        Id = userId,
                        Name = comment.Name,
                        CountryCode = ipInfo.CountryCode,
                        IP = ipInfo.Ip,
                        Active = true,
                        Moderator = IsModerator
                    });
                }

                comment.UserId = userId;

                await DatabaseCalls.SaveCommentAsync(comment);
            }
            else
            {                                
                await DatabaseCalls.UpdateCommentAsync(comment);
            }
        }
        catch (Exception ex)
        {
            await LibExternal.SendEmailAsync(nameof(SubmitCommentAsync), ex);
        }
        return true;
    }
}
