@using BlazorForum.Data

@if (showEditComment)
{
    <button class="btn btn-primary" @onclick="() => EditComment(Comment)">Edit</button>
    <span>&nbsp;</span>
}

@if (showDeleteComment)
{
    <button class="btn btn-primary" @onclick="() => DeleteComment(Comment)">Delete</button>
    <span>&nbsp;</span>
}

@if (showHideComment)
{
    <button class="btn btn-primary" @onclick="() => HideComment(Comment)">Hide</button>
    <span>&nbsp;</span>
}

@if (showUnhideComment)
{
    <button class="btn btn-primary" @onclick="() => UnhideComment(Comment)">Unhide</button>
    <span>&nbsp;</span>
}

<CompCommentReactions Comment=@Comment></CompCommentReactions>

<CompModalDialog 
    Title=@dialogTitle
    LeftBtnText=@dialogLeftBtnText
    RightBtnText=@dialogRightBtnText
    OnClose=@dialogOnClosed
    ShowDialog=@dialogShowDialog>
    <span>@dialogMessage</span>
</CompModalDialog>

<CompCommentEditDialog 
    PostType=@postType
    CommentId=@Comment?.Id
    TopicId=@Comment?.TopicId
    IsModerator=IsModerator
    InputName=@Comment?.Name
    InputTitle=@Comment?.Title
    InputText=@Comment?.Text
    OnEditCommentConfirmed=@dialogOnClosed
    ShowDialog=@dialogShowEdit>
</CompCommentEditDialog>

@code {
    [Parameter]
    public IpInfo? IpInfo { get; set; }

    [Parameter]
    public Comment? Comment { get; set; }

    [Parameter]
    public bool IsModerator { get; set; }

    [Parameter]
    public EventCallback<Comment> OnEditCommentConfirmed { get; set; }

    [Parameter]
    public EventCallback<Comment> OnDeleteCommentConfirmed { get; set; }

    [Parameter]
    public EventCallback<Comment> OnHideCommentConfirmed { get; set; }

    [Parameter]
    public EventCallback<Comment> OnUnhideCommentConfirmed { get; set; }

    private bool showEditComment = true;    
    private bool showDeleteComment = true;
    private bool showHideComment = true;
    private bool showUnhideComment = true;

    private string dialogTitle = string.Empty;
    private string dialogMessage = string.Empty;
    private string dialogLeftBtnText = string.Empty;
    private string dialogRightBtnText = string.Empty;    
    private EventCallback<bool> dialogOnClosed;
    private bool dialogShowDialog = false;
    private bool dialogShowEdit = false;
    private PostType postType;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        showEditComment = (Comment?.Ip == IpInfo?.Ip || IsModerator) && Comment?.Hidden == false;
        showDeleteComment = (Comment?.Ip == IpInfo?.Ip || IsModerator);
        showHideComment = (IsModerator && Comment?.Hidden == false);
        showUnhideComment = (IsModerator && Comment?.Hidden == true);
    }

    private void EditComment(Comment comment)
    {
        postType = comment.IsTopic() ? PostType.TopicUpdate : PostType.CommentUpdate;

        dialogOnClosed = EventCallback.Factory.Create<bool>(this, EditCommentConfirmedAsync);
        dialogShowEdit = true;
    }

    private async void EditCommentConfirmedAsync(bool editConfirmed)
    {
        dialogShowEdit = false;
        if (editConfirmed)
            await OnEditCommentConfirmed.InvokeAsync(Comment);
    }

    private void DeleteComment(Comment comment)
    {
        dialogTitle = "Delete comment";
        dialogMessage = "Are you sure you want to delete this comment?";
        dialogLeftBtnText = "OK";
        dialogRightBtnText = "Cancel";
        dialogOnClosed = EventCallback.Factory.Create<bool>(this, DeleteCommentConfirmedAsync);
        dialogShowDialog = true;
    }

    private async void DeleteCommentConfirmedAsync(bool deleteConfirmed)
    {
        dialogShowDialog = false;
        if (deleteConfirmed)
            await OnDeleteCommentConfirmed.InvokeAsync(Comment);
    }

    private void HideComment(Comment comment)
    {
        dialogTitle = "Hide comment";
        dialogMessage = "Are you sure you want to hide this comment?";
        dialogLeftBtnText = "OK";
        dialogRightBtnText = "Cancel";
        dialogOnClosed = EventCallback.Factory.Create<bool>(this, HideCommentConfirmedAsync);
        dialogShowDialog = true;
    }

    private async void HideCommentConfirmedAsync(bool hideConfirmed)
    {
        dialogShowDialog = false;
        if (hideConfirmed)
            await OnHideCommentConfirmed.InvokeAsync(Comment);
    }

    private void UnhideComment(Comment comment)
    {
        dialogTitle = "Unhide comment";
        dialogMessage = "Are you sure you want to unhide this comment?";
        dialogLeftBtnText = "OK";
        dialogRightBtnText = "Cancel";
        dialogOnClosed = EventCallback.Factory.Create<bool>(this, UnhideCommentConfirmedAsync);
        dialogShowDialog = true;
    }

    private async void UnhideCommentConfirmedAsync(bool unhideConfirmed)
    {
        dialogShowDialog = false;
        if (unhideConfirmed)
            await OnUnhideCommentConfirmed.InvokeAsync(Comment);
    }
}
