@using BlazorForum.Data

@if (showEditComment)
{
    <button class="btn btn-primary" @onclick="() => EditComment(Comment)">Edit</button>
    <span>&nbsp;</span>
}

@if (showDeleteComment)
{
    <button class="btn btn-primary" @onclick="() => DeleteComment(Comment)">Delete</button>
    <span>&nbsp;</span>
}

@if (showHideComment)
{
    <button class="btn btn-primary" @onclick="() => HideComment(Comment)">Hide</button>
    <span>&nbsp;</span>
}

@if (showUnhideComment)
{
    <button class="btn btn-primary" @onclick="() => UnhideComment(Comment)">Unhide</button>
    <span>&nbsp;</span>
}

<CompCommentReactions Comment=@Comment></CompCommentReactions>

<CompModalDialog 
    Title=@dialogTitle
    LeftBtnText=@dialogLeftBtnText
    RightBtnText=@dialogRightBtnText
    OnClosed=@dialogOnClosed
    ShowDialog=@dialogShowDialog>
    <span>@dialogMessage</span>
</CompModalDialog>

<CompModalDialog 
    Title=@dialogTitle
    LeftBtnText="Submit"
    RightBtnText="Cancel"
    OnClosed=@dialogOnClosed
    ShowDialog=@dialogShowEdit>
    <span>
        <CompCommentEdit 
            @ref="commentEdit"
            PostType=@postType            
            CommentId=@Comment?.Id
            TopicId=@Comment?.TopicId
            IsModerator=IsModerator
            InputName=@Comment?.Name
            InputTitle=@Comment?.Title    
            InputText=@Comment?.Text>
        </CompCommentEdit>
    </span>
</CompModalDialog>

@code {
    [Parameter]
    public IpInfo? IpInfo { get; set; }

    [Parameter]
    public Comment? Comment { get; set; }

    [Parameter]
    public bool IsModerator { get; set; }

    [Parameter]
    public EventCallback<Comment> OnEditComment { get; set; }

    [Parameter]
    public EventCallback<Comment> OnDeleteComment { get; set; }

    [Parameter]
    public EventCallback<Comment> OnHideComment { get; set; }

    [Parameter]
    public EventCallback<Comment> OnUnhideComment { get; set; }

    private bool showEditComment = true;    
    private bool showDeleteComment = true;
    private bool showHideComment = true;
    private bool showUnhideComment = true;

    private string dialogTitle = string.Empty;
    private string dialogMessage = string.Empty;
    private string dialogLeftBtnText = string.Empty;
    private string dialogRightBtnText = string.Empty;    
    private EventCallback<bool> dialogOnClosed;
    private bool dialogShowDialog = false;

    private CompCommentEdit? commentEdit;
    private bool dialogShowEdit = false;
    private PostType postType;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        showEditComment = (Comment?.Ip == IpInfo?.Ip || IsModerator) && Comment?.Hidden == false;
        showDeleteComment = (Comment?.Ip == IpInfo?.Ip || IsModerator);
        showHideComment = (IsModerator && Comment?.Hidden == false);
        showUnhideComment = (IsModerator && Comment?.Hidden == true);
    }

    private void EditComment(Comment comment)
    {
        if (comment.IsTopic())
        {
            postType = PostType.TopicUpdate;
            dialogTitle = "Edit topic";
        }
        else
        {
            postType = PostType.CommentUpdate;
            dialogTitle = "Edit comment";
        }

        dialogOnClosed = EventCallback.Factory.Create<bool>(this, EditCommentConfirmedAsync);
        dialogShowEdit = true;
    }

    private async void EditCommentConfirmedAsync(bool editConfirmed)
    {
        if (editConfirmed)
        {
            if (commentEdit != null)
            {
                if (await commentEdit.SubmitCommentAsync())
                {
                    dialogShowEdit = false;
                    if (editConfirmed)
                        await OnEditComment.InvokeAsync(Comment);
                }
            }
        }
        else
            dialogShowEdit = false;
    }

    private void DeleteComment(Comment comment)
    {
        dialogTitle = "Delete comment";
        dialogMessage = "Are you sure you want to delete this comment?";
        dialogLeftBtnText = "OK";
        dialogRightBtnText = "Cancel";
        dialogOnClosed = EventCallback.Factory.Create<bool>(this, DeleteCommentConfirmedAsync);
        dialogShowDialog = true;
    }

    private async void DeleteCommentConfirmedAsync(bool deleteConfirmed)
    {
        dialogShowDialog = false;
        if (deleteConfirmed)
            await OnDeleteComment.InvokeAsync(Comment);
    }

    private void HideComment(Comment comment)
    {
        dialogTitle = "Hide comment";
        dialogMessage = "Are you sure you want to hide this comment?";
        dialogLeftBtnText = "OK";
        dialogRightBtnText = "Cancel";
        dialogOnClosed = EventCallback.Factory.Create<bool>(this, HideCommentConfirmedAsync);
        dialogShowDialog = true;
    }

    private async void HideCommentConfirmedAsync(bool hideConfirmed)
    {
        dialogShowDialog = false;
        if (hideConfirmed)
            await OnHideComment.InvokeAsync(Comment);
    }

    private void UnhideComment(Comment comment)
    {
        dialogTitle = "Unhide comment";
        dialogMessage = "Are you sure you want to unhide this comment?";
        dialogLeftBtnText = "OK";
        dialogRightBtnText = "Cancel";
        dialogOnClosed = EventCallback.Factory.Create<bool>(this, UnhideCommentConfirmedAsync);
        dialogShowDialog = true;
    }

    private async void UnhideCommentConfirmedAsync(bool unhideConfirmed)
    {
        dialogShowDialog = false;
        if (unhideConfirmed)
            await OnUnhideComment.InvokeAsync(Comment);
    }
}
