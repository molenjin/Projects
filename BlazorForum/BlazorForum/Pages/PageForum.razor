@page "/forum"

@using BlazorForum.Data
@using BlazorForum.Database
@using BlazorForum.Libraries
@using BlazorForum.Components

@inject IDatabaseCalls DatabaseCalls
@inject LibFormat LibFormat
@inject LibModerator LibModerator
@inject LibExternal LibExternal

<PageTitle>Forum</PageTitle>

<div class="forum_content">
    <div class="forum">
        <CompModeratorLogIn ipInfo=@ipInfo IsModerator=isModerator></CompModeratorLogIn>
        <CompForumHeader ForumLinkOn=false ActionTitle="Start new topic" ActionLinkOn=true ActionLink="/new"></CompForumHeader>
        <br />
        <br />
        <big>

        @if (@topicList != null)
        {
            foreach (var topic in @topicList)
            {
                string topicTitle = LibFormat.HtmlDecode(topic.Title);
                string topicName = LibFormat.HtmlDecode(topic.Name);
                string topicLink = $"/topic/{topic.Id}/{LibFormat.TitleLink(topic.Title)}{LibFormat.NumberOfCommentsLink(topic.NumOfComments)}";
                string topicHidden = LibFormat.HiddenText(topic.Hidden);

                <span>@topicHidden<a class="topiclist forum_topic" href=@topicLink>@topicTitle</a> - @topicName</span>

                if (@LibFormat.FlagExists(@topic.CountryCode))
                {
                    <span>&nbsp;<img src=@LibFormat.FlagLink(@topic.CountryCode)></span>
                }
                <span>&nbsp;@LibFormat.NumberOfCommentsText(@topic.NumOfComments)</span>
                <br />
            }            
        }

        </big>
        <br />

        @if (loadMore)
        {
            <button class="btn btn-primary" @onclick=OnLoadMoreAsync>Load More</button>
        }

        <br />
        <br />
    </div>

    <br />
    <br />
</div>

@code {
    private IpInfo? ipInfo;
    private bool isModerator;
    private int numOfTopics = 0;
    private int pageNo = 1;
    private const int pageSize = 50;
    private List<Topic>? topicList;
    private bool loadMore;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            ipInfo = await LibExternal.GetIpInfoAsync();
            isModerator = await LibModerator.IsModeratorAsync(ipInfo);

            numOfTopics = await DatabaseCalls.GetNumOfTopicsAsync(true);
            topicList = await DatabaseCalls.GetTopicListAsync(true, pageNo, pageSize);

            loadMore = (pageNo * pageSize) < numOfTopics;
        }
        catch (Exception ex)
        {
            await LibExternal.SendEmailAsync(nameof(PageForum), ex);
        }
    }

    async Task OnLoadMoreAsync()
    {
        List<Topic>? additionalTopicList;

        try
        {
            if (topicList != null)
            {
                pageNo++;
                additionalTopicList = await DatabaseCalls.GetTopicListAsync(true, pageNo, pageSize);
                topicList.AddRange(additionalTopicList);

                loadMore = (pageNo * pageSize) < numOfTopics;
            }
        }
        catch (Exception ex)
        {
            await LibExternal.SendEmailAsync(nameof(PageForum), ex);
        }
    }
}