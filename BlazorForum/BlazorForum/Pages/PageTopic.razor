@page "/topic/{TopicId:int}/{Title}/{NumOfComments:int?}"

@using BlazorForum.Data
@using BlazorForum.Database
@using BlazorForum.Libraries
@using BlazorForum.Components

@inject IDatabaseCalls DatabaseCalls
@inject LibData LibData
@inject LibFormat LibFormat
@inject LibModerator LibModerator
@inject LibExternal LibExternal

<PageTitle>Topic</PageTitle>

<div class="forum_content">
    <div class="forum">
        <CompModeratorLogIn ipInfo=@ipInfo IsModerator=isModerator></CompModeratorLogIn>
        <CompForumHeader ForumLinkOn=true ActionTitle=@topicTitle ActionLinkOn=false></CompForumHeader>
        <br />
        <br />

        @if (@commentList != null)
        {
            foreach (var comment in @commentList)
            {
                <CompBadge Name=@LibFormat.HtmlDecode(@comment.Name) Ip=@comment.Ip Moderator=@comment.Moderator></CompBadge>
                <div class="spacer6"></div>
                <strong>@LibFormat.HtmlDecode(@comment.Name)</strong>
                <div class="spacer4"></div>
                if (@LibFormat.FlagExists(@comment.CountryCode))
                {
                    <span><img src=@LibFormat.FlagLink(@comment.CountryCode)> @LibData.CountryName(@comment.CountryCode)</span>
                    <br />
                }
                <span class="forum_faint">@LibFormat.DateTimeFormat(@comment.CreatedOn)</span>
                <br />
                <span class="forum_faint">@comment.Views.ToString("0,0") @if (comment.Views == 1) { <span> view</span> } else { <span> views</span> }</span>
                <br />
                <span >@LibFormat.HtmlDecode(@comment.Text)</span>
                <br />
                @if (comment.Ip == ipInfo?.Ip)
                {
                    <br />
                    <button class="btn btn-primary" @onclick="() => OnEditCommentAsync(comment)">Edit</button>
                    <button class="btn btn-primary" @onclick="() => OnDeleteCommentAsync(comment)">Delete</button>
                }
                <hr>
            }

            <CompComment PostType=PostType.CommentNew TopicId=TopicId CommentId=null IsModerator=isModerator></CompComment>
        }
    </div>

    <br />
    <br />
</div>

<CompModalDialog Title="Delete comment"
                 Message="Are you sure you want to delete this comment?"
                 LeftBtnText="Delete"
                 RightBtnText="Cancel"
                 ShowDialog=showDeleteConfirmation
                 OnClosed=OnDeleteCommentConfirmedAsync></CompModalDialog>

@code {
    [Parameter]
    public int TopicId { get; set; }

    [Parameter]
    public string Title { get; set; } = String.Empty;

    [Parameter]
    public int NumOfComments { get; set; }

    private IpInfo? ipInfo;
    private bool isModerator;
    private Comment currComment;
    private List<Comment>? commentList;
    private string topicTitle = String.Empty;
    private bool topicClosed;

    public bool showDeleteConfirmation = false;   

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            ipInfo = await LibExternal.GetIpInfoAsync();
            isModerator = await LibModerator.IsModeratorAsync(ipInfo);

            commentList = await DatabaseCalls.GetCommentListAsync(TopicId);

            if (commentList.Count != 0)
            {
                topicTitle = commentList.First().Title ?? string.Empty;
                topicClosed = commentList.First().Closed;

                ///////////////Later/////////////// await DatabaseCalls.IncTopicViewsAsync(TopicId);
            }
        }
        catch (Exception ex)
        {
            await LibExternal.SendEmailAsync(nameof(PageTopic), ex);
        }
    }

    private void OnEditCommentAsync(Comment comment)
    {
        currComment = comment;
    }

    private void OnDeleteCommentAsync(Comment comment)
    {
        currComment = comment;
        showDeleteConfirmation = true;
    }

    async Task OnDeleteCommentConfirmedAsync(bool deleteConfirmed)
    {
        showDeleteConfirmation = false;
        if (deleteConfirmed)
            await DatabaseCalls.DeleteCommentAsync(currComment.Id);
    }
}
