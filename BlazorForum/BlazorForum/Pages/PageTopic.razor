@page "/topic/{TopicId:int}/{Title}/{NumOfComments:int?}"

@using BlazorForum.Data
@using BlazorForum.Database
@using BlazorForum.Libraries
@using BlazorForum.Components

@inject IDatabaseCalls DatabaseCalls
@inject LibData LibData
@inject LibFormat LibFormat
@inject LibModerator LibModerator
@inject LibExternal LibExternal

<PageTitle>Topic</PageTitle>

<div class="forum">
    <CompModeratorLogIn 
        ipInfo=@ipInfo 
        IsModerator=@isModerator 
        OnModeratorLogIn=@OnModeratorLogIn>
    </CompModeratorLogIn>

    <CompForumHeader 
        ForumLinkOn=true 
        ActionTitle=@topicTitle 
        ActionLinkOn=false>
    </CompForumHeader>
    <br />
    <br />

    @if (@commentList != null)
    {
        foreach (var comment in @commentList)
        {
            <div class="width100 flex">
                <div class="column20">
                    <div class="width100 flex">
                        <div class="full_width">
                            <CompBadge Name=@LibFormat.HtmlDecode(@comment.Name) Ip=@comment.Ip Moderator=@comment.Moderator></CompBadge>
                            <div class="spacer6" />
                            <strong>@LibFormat.HtmlDecode(@comment.Name)</strong>
                            <div class="spacer4" />
                            @if (@LibFormat.FlagExists(@comment.CountryCode))
                            {
                                <span><img src=@LibFormat.FlagLink(@comment.CountryCode)> @LibData.CountryName(@comment.CountryCode)</span>
                                <br />
                            }
                            <span class="forum_faint">
                                @LibFormat.DateTimeFormat(@comment.CreatedOn)
                                <br />
                                @comment.Views.ToString("0,0") @if (comment.Views == 1) { <span> view</span> } else { <span> views</span> }
                                <br />
                                @if (isModerator) { @comment.Ip <br /> }                    
                            </span>
                        </div>
                    </div>
                </div>
                <div class="column">
                    @if (@comment.Hidden == false)
                    {
                        @((MarkupString)LibFormat.CommentTextDecode(@comment.Text))
                    }
                    @if (@comment.Hidden == true)
                    {
                        <p>(hidden)</p>
                        <span class="forum_faint">
                        @((MarkupString)LibFormat.CommentTextDecode(@comment.Text))
                        </span>
                    }
                    <br />
                    <br />
                    <CompCommentOptions 
                        IpInfo=@ipInfo 
                        Comment=@comment 
                        IsModerator=@isModerator 
                        OnEditCommentConfirmed=@OnEditCommentConfirmedAsync
                        OnDeleteCommentConfirmed=@OnDeleteCommentConfirmedAsync
                        OnHideCommentConfirmed=@OnHideCommentConfirmedAsync
                        OnUnhideCommentConfirmed=@OnUnhideCommentConfirmedAsync>
                    </CompCommentOptions>
                </div>
            </div>
            <hr class="topic">
        }
        <CompCommentEditDialog 
            PostType=PostType.CommentNew
            TopicId=@TopicId
            IsModerator=@isModerator
            InputName=@inputName
            InputTitle=@string.Empty
            InputText=@string.Empty
            OnEditCommentConfirmed=@OnAddNewCommentConfirmedAsync
            ShowDialog=@showAddNewComment>
        </CompCommentEditDialog>

        <button class="btn btn-primary" @onclick=@OnAddNewCommentAsync>Add new comment</button>
    }
</div>

@code {
    [Parameter]
    public int TopicId { get; set; }

    [Parameter]
    public string Title { get; set; } = String.Empty;

    [Parameter]
    public int NumOfComments { get; set; }

    private IpInfo? ipInfo;
    private bool isModerator;
    private List<Comment>? commentList;
    private string topicTitle = String.Empty;
    private bool topicClosed;

    private string inputName = String.Empty;
    private bool showAddNewComment = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            ipInfo = await LibExternal.GetIpInfoAsync();
            isModerator = await LibModerator.IsModeratorAsync(ipInfo);

            await LoadTopicAsync();
        }
        catch (Exception ex)
        {
            await LibExternal.SendEmailAsync(nameof(PageTopic), ex);
        }
    }

    private void OnModeratorLogIn(bool isModerator)
    {
        this.isModerator = isModerator;
    }

    private async Task OnEditCommentConfirmedAsync(Comment comment)
    {
        if (comment == null)
            return;

        await LoadTopicAsync();
    }

    private async Task OnDeleteCommentConfirmedAsync(Comment comment)
    {
        if (comment == null)
            return;

        try
        {
            await DatabaseCalls.DeleteCommentAsync(comment.Id);
            commentList?.Remove(comment);
        }
        finally { }
    }

    private async Task OnHideCommentConfirmedAsync(Comment comment)
    {
        if (comment == null)
            return;

        try
        {
            await DatabaseCalls.HideCommentAsync(comment.Id);
            comment.Hidden = true;
        }
        finally { }
    }

    private async Task OnUnhideCommentConfirmedAsync(Comment comment)
    {
        if (comment == null)
            return;

        try
        {
            await DatabaseCalls.UnhideCommentAsync(comment.Id);
            comment.Hidden = false;
        }
        finally { }
    }

    private async Task OnAddNewCommentAsync()
    {
        inputName = string.Empty;

        if (ipInfo != null && !string.IsNullOrEmpty(ipInfo?.Ip))
            inputName = await DatabaseCalls.GetUserNameAsync(ipInfo.Ip);

        showAddNewComment = true;
    }

    private async Task OnAddNewCommentConfirmedAsync(bool addNewCommentConfirmed)
    {
        showAddNewComment = false;

        if (addNewCommentConfirmed)
            await LoadTopicAsync();        
    }

    private async Task LoadTopicAsync()
    {
        try
        {
            commentList = await DatabaseCalls.GetCommentListAsync(TopicId, showAll: isModerator);

            if (commentList.Count != 0)
            {
                topicTitle = commentList.First().Title ?? string.Empty;
                topicClosed = commentList.First().Closed;

                await DatabaseCalls.IncTopicViewsAsync(TopicId);
            }      
        }
        finally { }
    }
}
